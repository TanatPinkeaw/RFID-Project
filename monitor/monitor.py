import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import time
from datetime import datetime
import logging
from database import get_db_connection, test_database_connection, get_recent_scanned_tags, get_locations, get_tag_movements, get_recent_scanned_tags_by_location

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class TagMonitorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("RFID Tag Monitor System")
        self.root.geometry("1920x1080")  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏∏‡∏î
        self.root.configure(bg='#f0f0f0')
        
        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠
        self.root.state('zoomed')  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows
        
        # Variables
        self.is_refreshing = False
        self.recent_tags = []
        self.location_map = {}  # map location_id -> name
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
        self.create_widgets()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÄ‡∏™‡∏£‡πá‡∏à)
        self.root.after(100, self.check_database_connection)
        
        # ‡πÇ‡∏´‡∏•‡∏î locations (‡∏´‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡πÄ‡∏™‡∏£‡πá‡∏à)
        self.root.after(200, self.load_locations)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.start_auto_refresh()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤
        self.start_clock()
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)

    def create_widgets(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI components ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        # Style configuration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏´‡∏ç‡πà
        style = ttk.Style()
        style.theme_use('clam')
        
        # Configure styles ‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏µ‡∏Å
        style.configure('Heading.TLabel', font=('Arial', 40, 'bold'))
        style.configure('Large.TLabel', font=('Arial', 24))
        style.configure('Medium.TLabel', font=('Arial', 20))
        style.configure('Treeview.Heading', font=('Arial', 28, 'bold'))
        style.configure('Treeview', font=('Arial', 22), rowheight=60)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÅ‡∏ñ‡∏ß‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° style ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏´‡∏ç‡πà
        style.configure('Large.TButton', font=('Arial', 14, 'bold'), padding=(10, 8))
        
        # Main frame
        main_frame = ttk.Frame(self.root, padding="20")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configure grid weights
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        main_frame.rowconfigure(0, weight=1)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Notebook (Tabs)
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # (status_text ‡∏à‡∏∞‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Tab ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Location ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÅ‡∏ó‡πá‡∏ö‡∏ô‡∏±‡πâ‡∏ô)
 
        # Tab 1: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Location
        self.setup_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.setup_tab, text="‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Location")
        
        # Tab 2: Recent Scanned Tags
        self.monitor_tab = ttk.Frame(self.notebook)
        self.notebook.add(self.monitor_tab, text="üìä Recent Scanned Tags")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô tabs
        self.create_setup_tab_content()
        self.create_monitor_tab_content()

    def create_setup_tab_content(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô Tab ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Location)"""
        # Main frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö setup tab
        setup_main_frame = ttk.Frame(self.setup_tab, padding="25")
        setup_main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))

        self.setup_tab.columnconfigure(0, weight=1)
        self.setup_tab.rowconfigure(0, weight=1)
        setup_main_frame.columnconfigure(0, weight=1)

        # Location Settings (‡∏¢‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ)
        location_frame = ttk.LabelFrame(setup_main_frame, text="üìç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Location ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", padding="25")
        location_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 25))

        ttk.Label(location_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Location:", style='Large.TLabel').grid(row=0, column=0, sticky=tk.W, pady=(0, 15))
        self.location_var = tk.StringVar()
        self.location_combo = ttk.Combobox(location_frame, textvariable=self.location_var,
                                          width=40, state="readonly", font=("Arial", 18))
        self.location_combo.grid(row=1, column=0, sticky=(tk.W, tk.E))
        
        # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å location ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        self.location_combo.bind("<<ComboboxSelected>>", lambda e: self.refresh_tags())

        # Info / Help text
        help_lbl = ttk.Label(location_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå)", font=("Arial", 12))
        help_lbl.grid(row=2, column=0, sticky=tk.W, pady=(10,0))

        # Status display
        status_display_frame = ttk.LabelFrame(setup_main_frame, text="üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•", padding="25")
        status_display_frame.grid(row=1, column=0, sticky=(tk.W, tk.E))
        
        self.status_label = ttk.Label(status_display_frame, text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Location ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 
                                     font=("Arial", 18), foreground="blue")
        self.status_label.grid(row=0, column=0)

        # System log / status area NOW inside the Setup tab (moved from bottom of main window)
        log_frame = ttk.LabelFrame(setup_main_frame, text="System Log", padding="6")
        log_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(12, 0))
        self.status_text = scrolledtext.ScrolledText(log_frame, height=8, font=("Arial", 12))
        self.status_text.pack(fill="both", expand=True)

        # ensure status_text is writable initially
        self.add_status("‚ÑπÔ∏è System log initialized (moved into Setup tab)")

    def create_monitor_tab_content(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏ô Tab Monitor - ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏π‡∏õ"""
        # Main frame ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monitor tab
        monitor_main_frame = ttk.Frame(self.monitor_tab, padding="10")
        monitor_main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        self.monitor_tab.columnconfigure(0, weight=1)
        self.monitor_tab.rowconfigure(0, weight=1)
        monitor_main_frame.columnconfigure(0, weight=1)
        monitor_main_frame.rowconfigure(1, weight=1)  # ‡πÉ‡∏´‡πâ table ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà

        # --- NEW: Location filter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Monitor tab ---
        filter_frame = ttk.Frame(monitor_main_frame)
        filter_frame.grid(row=0, column=0, sticky=(tk.W, tk.E), pady=(0, 8))
        ttk.Label(filter_frame, text="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Location ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á:", font=("Arial", 16)).pack(side="left")
        self.monitor_location_var = tk.StringVar()
        self.monitor_location_combo = ttk.Combobox(filter_frame, textvariable=self.monitor_location_var,
                                                   width=40, state="readonly", font=("Arial", 14))
        self.monitor_location_combo.pack(side="left", padx=(8,0))
        self.monitor_location_combo.bind("<<ComboboxSelected>>", lambda e: self.refresh_tags())
        # --- END NEW ---
        
        # Tags Table Frame - ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà
        table_frame = ttk.LabelFrame(monitor_main_frame, text="üìã Tags List", padding="10")
        table_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Tags treeview - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        columns = ("tag_id", "asset_name", "time", "status")
        self.tags_tree = ttk.Treeview(table_frame, columns=columns, show="headings", height=35)
        
        # Configure columns ‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
        self.tags_tree.heading("tag_id", text="Tag ID")
        self.tags_tree.heading("asset_name", text="Asset Name")
        self.tags_tree.heading("time", text="‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πÅ‡∏Å‡∏ô")
        self.tags_tree.heading("status", text="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á column ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏´‡∏ç‡πà
        self.tags_tree.column("tag_id", width=600, anchor="w")
        self.tags_tree.column("asset_name", width=500, anchor="w")
        self.tags_tree.column("time", width=300, anchor="center")
        self.tags_tree.column("status", width=300, anchor="center")
        
        # Configure row colors - ‡∏™‡∏µ‡πÄ‡∏î‡πà‡∏ô‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏π‡∏õ
        self.tags_tree.tag_configure("borrowed", background="#f2d9db", foreground="#d32f2f")  # ‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
        self.tags_tree.tag_configure("available", background="#f3fff4", foreground="#388e3c")  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
        
        # Scrollbar for treeview
        tags_scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=self.tags_tree.yview)
        self.tags_tree.configure(yscrollcommand=tags_scrollbar.set)
        
        self.tags_tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        tags_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # Bind double-click event
        self.tags_tree.bind("<Double-1>", self.on_tag_double_click)
        
        table_frame.columnconfigure(0, weight=1)
        table_frame.rowconfigure(0, weight=1)
        
        # Bottom control bar - ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏π‡∏õ
        bottom_frame = ttk.Frame(monitor_main_frame)
        bottom_frame.grid(row=2, column=0, sticky=(tk.W, tk.E), pady=(10, 5))
        
        # Control elements ‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
        control_container = ttk.Frame(bottom_frame)
        control_container.pack(side="right", padx=(0, 20))  # ‡∏à‡∏±‡∏î‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤
        
        # Refresh button
        refresh_btn = ttk.Button(control_container, text="üîÑ Refresh", 
                            command=self.refresh_tags, 
                            width=12, 
                            style='Large.TButton')
        refresh_btn.pack(side="left", padx=(0, 10))
        
        # Clear button  
        clear_btn = ttk.Button(control_container, text="üóëÔ∏è Clear", 
                          command=self.clear_tags, 
                          width=12,
                          style='Large.TButton')
        clear_btn.pack(side="left", padx=(0, 15))
        
        # Auto refresh status
        self.auto_refresh_label = ttk.Label(control_container, text="üîÑ Auto Refresh: ON", 
                                       font=("Arial", 14, "bold"), foreground="green")
        self.auto_refresh_label.pack(side="left", padx=(0, 20))
        
        # Clock display
        self.current_time_label = ttk.Label(control_container, text="", 
                                       font=("Arial", 18, "bold"), foreground="blue")
        self.current_time_label.pack(side="left")

    def start_clock(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        def update_clock():
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.current_time_label.config(text=f"üïê {current_time}")
            self.root.after(1000, update_clock)  # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        
        update_clock()

    def check_database_connection(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        success, message = test_database_connection()
        if success:
            self.add_status(f"‚úÖ {message}")
        else:
            self.add_status(f"‚ùå {message}")
            messagebox.showerror("Database Error", message)

    def load_locations(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ locations"""
        try:
            locations = get_locations()
            self.location_map = {}  # map id -> name
            if locations:
                # values ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö combobox ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ setup (no "All")
                location_values = [f"{loc['location_id']} - {loc['name']}" for loc in locations]
                self.location_combo['values'] = location_values
                self.location_combo.current(0)

                # ‡πÄ‡∏Å‡πá‡∏ö mapping id->name
                for loc in locations:
                    try:
                        self.location_map[int(loc['location_id'])] = loc.get('name') or str(loc['location_id'])
                    except Exception:
                        pass

                # values ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö monitor filter (‡∏°‡∏µ "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏£‡∏Å)
                monitor_values = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + location_values
                if hasattr(self, 'monitor_location_combo'):
                    self.monitor_location_combo['values'] = monitor_values
                    self.monitor_location_combo.current(0)
                self.add_status(f"üìç ‡πÇ‡∏´‡∏•‡∏î locations: {len(locations)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            else:
                self.add_status("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö locations ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        except Exception as e:
            self.add_status(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î locations ‡πÑ‡∏î‡πâ: {str(e)}")

    def refresh_tags(self):
        """‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ tags ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        if self.is_refreshing:
            return

        self.is_refreshing = True
        try:
            # ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (None = ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
            selected = None
            location_name = "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
            
            # ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ filter ‡∏à‡∏≤‡∏Å monitor combobox ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if hasattr(self, 'monitor_location_combo') and self.monitor_location_combo.get():
                sel = self.monitor_location_combo.get()
                if sel and sel != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                    try:
                        selected = int(sel.split(" - ")[0])
                        location_name = sel.split(" - ")[1]
                    except Exception:
                        selected = None
                else:
                    selected = None
            elif self.location_combo.get():
                # fallback: ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å setup tab
                sel = self.location_combo.get()
                if sel:
                    try:
                        selected = int(sel.split(" - ")[0])
                        location_name = sel.split(" - ")[1]
                    except Exception:
                        selected = None

            self.add_status(f"üîç Debug: selected_location_id = {selected}")

            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ tag ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å DB (‡∏ï‡∏≤‡∏° location ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
            raw_tags = []
            if selected is None:
                raw_tags = get_recent_scanned_tags(50) or []
            else:
                raw_tags = get_recent_scanned_tags_by_location(selected, 50) or []

            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° recent_tags ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà refresh_tags_display ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            new_list = []
            for row in raw_tags:
                # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô DB ‡∏≠‡∏≤‡∏à‡∏Ñ‡∏∑‡∏ô dict ‡∏´‡∏£‡∏∑‡∏≠ tuple ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô ‡∏à‡∏∂‡∏á‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏ö‡∏ö
                if isinstance(row, dict):
                    tag_id = row.get('tag_id') or row.get('uii') or row.get('TagID') or None
                    last_seen = row.get('last_seen') or row.get('timestamp') or row.get('time')
                    asset_name = row.get('asset_name', '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏π‡∏Å')
                    status = row.get('status', '‡∏≠‡∏≠‡∏Å')
                    current_location_id = row.get('current_location_id')
                else:
                    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô tuple ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (tag_id, last_seen)
                    try:
                        tag_id = row[0]
                        last_seen = row[1]
                        asset_name = '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏π‡∏Å'
                        status = '‡∏≠‡∏≠‡∏Å'
                        current_location_id = None
                    except Exception:
                        continue

                if not tag_id:
                    continue

                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• asset/status ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ tag
                asset_info = self.get_asset_info_by_tag(tag_id, selected)
                
                # last_seen ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô datetime ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô string
                try:
                    if isinstance(last_seen, str):
                        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse ‡πÅ‡∏ö‡∏ö ISO ‡∏´‡∏£‡∏∑‡∏≠ common formats
                        try:
                            last_seen_dt = datetime.fromisoformat(last_seen)
                        except Exception:
                            last_seen_dt = datetime.strptime(last_seen, "%Y-%m-%d %H:%M:%S")
                    else:
                        last_seen_dt = last_seen
                except Exception:
                    last_seen_dt = datetime.now()

                new_list.append({
                    'tag_id': tag_id,
                    'asset_name': asset_info.get('asset_name', asset_name),
                    'last_seen': last_seen_dt,
                    'status': asset_info.get('status', status),
                    'current_location_id': asset_info.get('current_location_id', current_location_id)
                })

            # ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
            self.recent_tags = new_list
            self.refresh_tags_display()
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            if hasattr(self, 'status_label'):
                self.status_label.config(text=f"‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {location_name} ({len(self.recent_tags)} tags)")
            
            self.add_status(f"üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä {location_name}: {len(self.recent_tags)} tags")

        except Exception as e:
            self.add_status(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {str(e)}")
        finally:
            self.is_refreshing = False

    def get_asset_info_by_tag(self, tag_id, selected_location=None):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Asset ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å tag_id - ‡πÉ‡∏ä‡πâ Location ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Å‡∏≥‡∏´‡∏ô‡∏î '‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏≠‡∏Å'"""
        try:
            conn = get_db_connection()
            if not conn:
                return {"asset_name": "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏π‡∏Å", "status": "‡∏≠‡∏≠‡∏Å", "current_location_id": None}

            cursor = conn.cursor()
            cursor.execute("""
                SELECT a.name, t.current_location_id, t.status
                FROM tags t 
                LEFT JOIN assets a ON t.asset_id = a.asset_id 
                WHERE t.tag_id = %s
            """, (tag_id,))

            result = cursor.fetchone()
            cursor.close()
            conn.close()

            if result:
                asset_name = result[0] if result[0] else "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏π‡∏Å"
                current_location_id = result[1]
                # tag_status = result[2]  # ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ ‡∏ñ‡πâ‡∏≤ DB ‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤

                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á selected_location ‡πÅ‡∏•‡∏∞ current_location_id
                if selected_location is None:
                    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å location ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤ current_location_id
                    if current_location_id is None:
                        status = "‡∏≠‡∏≠‡∏Å"
                    else:
                        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ location ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á "‡πÄ‡∏Ç‡πâ‡∏≤" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô (‡πÇ‡∏î‡∏¢‡∏™‡∏£‡∏∏‡∏õ)
                        status = "‡πÄ‡∏Ç‡πâ‡∏≤"
                else:
                    if current_location_id == selected_location:
                        status = "‡πÄ‡∏Ç‡πâ‡∏≤"
                    else:
                        # ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)({loc_name})
                        if current_location_id is None:
                            status = "‡∏≠‡∏≠‡∏Å"
                        else:
                            loc_name = self.location_map.get(current_location_id, str(current_location_id))
                            status = f"‡∏≠‡∏≠‡∏Å "

                return {
                    "asset_name": asset_name,
                    "status": status,
                    "current_location_id": current_location_id
                }
            else:
                return {"asset_name": "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏π‡∏Å", "status": "‡∏≠‡∏≠‡∏Å", "current_location_id": None}

        except Exception as e:
            logging.error(f"Error getting asset info: {e}")
            return {"asset_name": "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏π‡∏Å", "status": "‡∏≠‡∏≠‡∏Å", "current_location_id": None}

    def refresh_tags_display(self):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô treeview - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Location"""
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        for item in self.tags_tree.get_children():
            self.tags_tree.delete(item)

        if not self.recent_tags:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Location (‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠)
            selected_loc = None
            if hasattr(self, 'monitor_location_combo') and self.monitor_location_combo.get():
                sel = self.monitor_location_combo.get()
                if sel and sel != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
                    try:
                        selected_loc = int(sel.split(" - ")[0])
                    except:
                        selected_loc = None

            if selected_loc is None:
                message = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Location ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            else:
                loc_name = self.location_map.get(selected_loc, f"Location {selected_loc}")
                message = f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô {loc_name}"

            self.tags_tree.insert("", "end", values=(
                "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", message, "-", "-"
            ), tags=("no_data",))
            return

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• tags ‡∏õ‡∏Å‡∏ï‡∏¥...
        for tag in self.recent_tags:
            time_str = tag['last_seen'].strftime("%H:%M:%S") if hasattr(tag['last_seen'], 'strftime') else str(tag['last_seen'])
            raw_status = tag.get('status', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö')

            # ‡πÅ‡∏¢‡∏Å icon/label ‡∏à‡∏≤‡∏Å raw_status (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "‡∏≠‡∏≠‡∏Å (‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà)")
            if raw_status.startswith("‡πÄ‡∏Ç‡πâ‡∏≤"):
                tag_color = "available"
                status_display = "üü¢ ‡πÄ‡∏Ç‡πâ‡∏≤"
            elif raw_status.startswith("‡∏≠‡∏≠‡∏Å"):
                tag_color = "borrowed"
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏î‡πâ‡∏ß‡∏¢
                if "(" in raw_status and ")" in raw_status:
                    status_display = f"üî¥ {raw_status}"
                else:
                    status_display = "üî¥ ‡∏≠‡∏≠‡∏Å"
            else:
                tag_color = "no_data"
                status_display = "üü° ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß"

            self.tags_tree.insert("", "end", values=(
                tag['tag_id'],
                tag.get('asset_name', '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏π‡∏Å'),
                time_str,
                status_display
            ), tags=(tag_color,))

    def clear_tags(self):
        """‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ tags"""
        self.recent_tags.clear()
        self.refresh_tags_display()
        self.add_status("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ tags ‡πÅ‡∏•‡πâ‡∏ß")

    def on_tag_double_click(self, event):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏±‡∏ö‡πÄ‡∏ö‡∏¥‡∏•‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà tag"""
        selection = self.tags_tree.selection()
        if not selection:
            return
        
        item = self.tags_tree.item(selection[0])
        tag_id = item['values'][0]  # Tag ID ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà column ‡πÅ‡∏£‡∏Å
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
        self.show_tag_movements(tag_id)

    def show_tag_movements(self, tag_id):
        """‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á tag"""
        movements = get_tag_movements(tag_id, 20)  # ‡∏î‡∏∂‡∏á 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        movement_window = tk.Toplevel(self.root)
        movement_window.title(f"Tag Movement History - {tag_id}")
        movement_window.geometry("1000x700")
        movement_window.configure(bg='#f0f0f0')

        # Header
        header_frame = ttk.Frame(movement_window)
        header_frame.pack(fill="x", padx=25, pady=25)

        ttk.Label(header_frame, text=f"üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß: {tag_id}",
                font=("Arial", 20, "bold")).pack()

        # Table frame
        table_frame = ttk.LabelFrame(movement_window, text="Movement History", padding="20")
        table_frame.pack(fill="both", expand=True, padx=25, pady=(0, 25))

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á treeview ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
        columns = ("timestamp", "event", "from_loc", "to_loc")
        tree = ttk.Treeview(table_frame, columns=columns, show="headings")

        tree.heading("timestamp", text="‡πÄ‡∏ß‡∏•‡∏≤")
        tree.heading("event", text="‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå")
        tree.heading("from_loc", text="‡∏à‡∏≤‡∏Å")
        tree.heading("to_loc", text="‡πÑ‡∏õ")

        tree.column("timestamp", width=200)
        tree.column("event", width=150)
        tree.column("from_loc", width=200)
        tree.column("to_loc", width=200)

        # Scrollbar
        scrollbar = ttk.Scrollbar(table_frame, orient="vertical", command=tree.yview)
        tree.configure(yscrollcommand=scrollbar.set)

        tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))

        table_frame.columnconfigure(0, weight=1)
        table_frame.rowconfigure(0, weight=1)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å movements
        for movement in movements:
            tree.insert("", "end", values=(
                movement.get('timestamp').strftime("%Y-%m-%d %H:%M:%S") if movement.get('timestamp') else '-',
                movement.get('event_type') or '-',
                movement.get('from_location_name') or str(movement.get('from_location_id') or '-'),
                movement.get('to_location_name') or str(movement.get('to_location_id') or '-')
            ))

        if not movements:
            ttk.Label(table_frame, text="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß",
                    font=("Arial", 16)).grid(row=1, column=0, pady=25)

    def start_auto_refresh(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        def auto_refresh():
            if not self.is_refreshing:
                self.refresh_tags()
            # ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            self.root.after(3000, auto_refresh)
        
        self.root.after(2000, auto_refresh)  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏´‡∏•‡∏±‡∏á 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

    def add_status(self, message):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        status_message = f"[{timestamp}] {message}\n"
        
        self.status_text.insert(tk.END, status_message)
        self.status_text.see(tk.END)

    def on_closing(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        self.root.destroy()

def main():
    root = tk.Tk()
    try:
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ icon (optional)
        # root.iconbitmap("icon.ico")
        pass
    except:
        pass
    
    app = TagMonitorApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
