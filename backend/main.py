"""
RFID Management System - Main Application
========================================

‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö RFID Management System
‡πÉ‡∏ä‡πâ FastAPI ‡πÄ‡∏õ‡πá‡∏ô web framework ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á REST API

‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:
- Asset Management: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå
- Tag Tracking: ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ó‡πá‡∏Å RFID
- Location Management: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
- Real-time Updates: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö real-time ‡∏ú‡πà‡∏≤‡∏ô WebSocket
- Notification System: ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
- Borrowing System: ‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå

‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
    python main.py

‡∏´‡∏£‡∏∑‡∏≠:
    uvicorn main:app --host 0.0.0.0 --port 8000 --reload
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
from config import settings
from config import get_db
import logging
import asyncio
from datetime import datetime
from fastapi.websockets import WebSocket, WebSocketDisconnect
from ws_manager import manager
import json

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ routers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÅ‡∏ï‡πà‡∏•‡∏∞ router ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ endpoint ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
from routers.users import router as users_router           # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞ authentication
from routers.assets import router as assets_router         # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå
from routers.tags import router as tags_router             # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡πá‡∏Å RFID
from routers.locations import router as locations_router   # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
from routers.movements import router as movements_router   # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
from routers.reports import router as reports_router       # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
from routers.notifications import router as notifications_router  # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
from routers.system_config import router as system_config_router  # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
from routers.scanner_config import router as scanner_config_router  # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô
from routers.scan import router as scan_router             # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID
from routers.borrowing import router as borrowing_router   # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging ‡∏£‡∏∞‡∏ö‡∏ö
logging.basicConfig(
    level=getattr(logging, settings.log_level),  # ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£ log ‡∏à‡∏≤‡∏Å settings
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(settings.log_file),  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        logging.StreamHandler()                  # ‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô console
    ]
)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ lifecycle ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
    ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ startup ‡πÅ‡∏•‡∏∞ shutdown
    
    Startup: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö, ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ
    Shutdown: ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠, ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
    """
    # === STARTUP ===
    logger.info(f"üöÄ RFID Management System starting up")
    logger.info(f"   Environment: {settings.environment}")
    logger.info(f"   Database: {settings.database_url}")
    logger.info(f"   Debug Mode: {settings.debug}")
    
    # TODO: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô background tasks, database connections, etc.
    
    yield  # ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    
    # === SHUTDOWN ===
    logger.info("üõë RFID Management System shutting down")
    # TODO: ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£

# ‡∏™‡∏£‡πâ‡∏≤‡∏á FastAPI application instance
app = FastAPI(
    title="RFID Management System",
    description="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ RFID Scanner ‡πÅ‡∏•‡∏∞ Tag Tracking ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå",
    version="1.0.0",
    debug=settings.debug,
    lifespan=lifespan,  # ‡πÉ‡∏ä‡πâ lifespan ‡πÅ‡∏ó‡∏ô on_event (FastAPI v0.93+)
    
    # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ OpenAPI/Swagger
    docs_url="/docs",           # Swagger UI
    redoc_url="/redoc",         # ReDoc
    openapi_url="/openapi.json" # OpenAPI schema
)

# CORS Middleware - ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ frontend ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],        # ‡πÉ‡∏ô production ‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ö‡∏∏ domain ‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï ‡πÄ‡∏ä‡πà‡∏ô ["https://mydomain.com"]
    allow_credentials=True,     # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï cookies ‡πÅ‡∏•‡∏∞ credentials
    allow_methods=["*"],        # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å HTTP methods (GET, POST, PUT, DELETE, etc.)
    allow_headers=["*"],        # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å headers
)

# =====================
# Health Check Endpoints
# =====================

@app.get("/health")
def health_check():
    """
    Health check endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
    ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢ load balancer, monitoring tools, ‡∏´‡∏£‡∏∑‡∏≠ DevOps
    
    Returns:
        dict: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
    """
    return {
        "status": "healthy",
        "message": "RFID Management System is running",
        "timestamp": datetime.now().isoformat(),
        "environment": settings.environment,
        "version": "1.0.0"
    }

@app.get("/api/test")
def test_api():
    """
    API test endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    ‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥
    
    Returns:
        dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ configuration
    """
    return {
        "status": "OK", 
        "message": "API is working",
        "timestamp": datetime.now().isoformat(),
        "config": {
            "environment": settings.environment,
            "debug": settings.debug,
            "database_type": "mysql" if settings.database_url.startswith("mysql") else "sqlite"
        }
    }

# ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° WebSocket status endpoint
@app.get("/api/websocket/status")
def websocket_status():
    """
    ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket
    ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ client ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß
    """
    return {
        "active_connections": manager.get_connection_count(),
        "client_info": {
            client_id: {
                "connected_at": info["connected_at"].isoformat(),
                "client_address": info["client_address"]
            }
            for client_id, info in manager.get_client_info().items()
        },
        "status": "running" if manager.get_connection_count() > 0 else "idle"
    }

# ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏° test broadcast endpoint
@app.post("/api/websocket/test-broadcast")
async def test_broadcast():
    """
    ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á WebSocket clients ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á WebSocket
    """
    if manager.get_connection_count() == 0:
        raise HTTPException(status_code=400, detail="No WebSocket connections available")
    
    test_message = {
        "type": "test_notification",
        "title": "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö",
        "message": "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå",
        "timestamp": datetime.now().isoformat()
    }
    
    await manager.broadcast(test_message)
    
    return {
        "status": "success",
        "message": "Test message broadcasted",
        "sent_to_connections": manager.get_connection_count()
    }

# =====================
# API Routes Registration
# =====================

# ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô routers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î - ‡πÅ‡∏ï‡πà‡∏•‡∏∞ router ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ endpoints ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
app.include_router(users_router)           # /api/users/* - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
app.include_router(assets_router)          # /api/assets/* - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå
app.include_router(tags_router)            # /api/tags/* - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡πá‡∏Å RFID
app.include_router(locations_router)       # /api/locations/* - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
app.include_router(movements_router)       # /api/movements/* - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß
app.include_router(reports_router)         # /api/reports/* - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
app.include_router(notifications_router)  # /api/notifications/* - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
app.include_router(system_config_router)  # /api/system-config/* - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
app.include_router(scanner_config_router) # /api/scanner-config/* - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô
app.include_router(scan_router)           # /api/scan/* - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID
app.include_router(borrowing_router)      # /api/borrowing/* - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏∑‡∏°-‡∏Ñ‡∏∑‡∏ô

# =====================
# Main Endpoints
# =====================

@app.get("/")
def read_root():
    """
    Root endpoint - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á API
    
    Returns:
        dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á API
    """
    return {
        "message": "RFID Asset Management API",
        "version": "1.0.0",
        "environment": settings.environment,
        "docs_url": "/docs",
        "health_check": "/health"
    }

# =====================
# Debug Endpoints (Development Only)
# =====================

@app.get("/debug/routes")
def list_routes():
    """
    Debug endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π available routes
    ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô development environment
    
    Returns:
        dict: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ routes ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    
    Raises:
        HTTPException: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà development environment
    """
    if settings.environment != "development":
        raise HTTPException(status_code=404, detail="Not found")
    
    routes = []
    for route in app.routes:
        if hasattr(route, 'methods') and hasattr(route, 'path'):
            routes.append({
                "path": route.path,
                "methods": list(route.methods),
                "name": getattr(route, 'name', 'unknown')
            })
    return {"routes": routes}

# =====================
# WebSocket for Real-time Updates
# =====================

# WebSocket endpoint for real-time updates
@app.websocket("/ws/realtime")
async def websocket_endpoint(websocket: WebSocket):
    """
    WebSocket endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö real-time
    
    ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
    1. ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å client
    2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ active connections
    3. ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å client (optional)
    4. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ client ‡∏õ‡∏¥‡∏î
    
    Message Types ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á client:
    - connection_established: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    - heartbeat: ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    - notification: ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ
    - scan_result: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô RFID
    - asset_update: ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå
    - system_status: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
    """
    client_address = websocket.client.host if websocket.client else 'unknown'
    client_id = f"client_{client_address}_{datetime.now().strftime('%H%M%S')}"
    
    try:
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket
        await manager.connect(websocket, client_id)
        
        # ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å client
        while True:
            try:
                # ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å client
                data = await websocket.receive_text()
                
                # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å client (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                try:
                    message = json.loads(data)
                    message_type = message.get('type', 'unknown')
                    
                    logger.debug(f"Received WebSocket message from {client_id}: {message_type}")
                    
                    # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                    if message_type == 'ping':
                        await manager.send_to_websocket(websocket, {
                            'type': 'pong',
                            'message': 'Server is alive'
                        })
                    
                except json.JSONDecodeError:
                    logger.warning(f"Invalid JSON from {client_id}: {data}")
                    
            except WebSocketDisconnect:
                logger.info(f"Client {client_id} disconnected normally")
                break
            except Exception as e:
                logger.error(f"Error handling WebSocket message from {client_id}: {e}")
                await asyncio.sleep(1)  # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô busy loop
                
    except WebSocketDisconnect:
        logger.info(f"Client {client_id} disconnected during connection")
    except Exception as e:
        logger.error(f"WebSocket error for client {client_id}: {e}")
    finally:
        # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        manager.disconnect(websocket)
        logger.info(f"WebSocket connection cleaned up for {client_id}")

# =====================
# Application Entry Point
# =====================

if __name__ == "__main__":
    """
    Entry point ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    
    ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô:
    1. Development: python main.py
    2. Production: uvicorn main:app --host 0.0.0.0 --port 8000
    3. With SSL: uvicorn main:app --host 0.0.0.0 --port 8000 --ssl-keyfile key.pem --ssl-certfile cert.pem
    """
    import uvicorn
    
    # ‡πÉ‡∏ä‡πâ import string ‡πÅ‡∏ó‡∏ô app object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ reload ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    uvicorn.run(
        "main:app",                    # import string format
        host=settings.ws_host,         # host ‡∏à‡∏≤‡∏Å settings
        port=settings.ws_port,         # port ‡∏à‡∏≤‡∏Å settings
        reload=settings.debug,         # auto-reload ‡πÉ‡∏ô debug mode
        log_level=settings.log_level.lower()  # log level
    )