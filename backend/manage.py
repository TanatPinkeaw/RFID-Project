#!/usr/bin/env python3
"""
RFID System Management CLI
=========================

Command Line Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö RFID Management System
‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö, ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤, ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤

Available Commands:
- create-mysql-db: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL
- init-db: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
- check-db: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
- backup-db: ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (SQLite only)
- reset-db: ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (development only)
- config: ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
- create-env: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env ‡∏à‡∏≤‡∏Å template
- check-scanner: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RFID scanner
- install-deps: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Python dependencies
- structure: ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ

‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
    python manage.py [command]

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
    python manage.py config
    python manage.py init-db
    python manage.py check-db
"""

import argparse
import sys
import os
import shutil
from datetime import datetime
from pathlib import Path

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ configuration ‡πÅ‡∏•‡∏∞ database functions
try:
    from config import settings
    from config.settings import ensure_directories
    from config.database import init_database, check_db_connection, engine
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("Please make sure all required files exist and dependencies are installed")
    print("Try running: pip install -r requirements.txt")
    sys.exit(1)

import logging

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
try:
    logging.basicConfig(level=getattr(logging, settings.log_level))
except:
    logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# =====================
# Database Management Functions
# =====================

def create_mysql_database():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MySQL ‡πÉ‡∏´‡∏°‡πà
    ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô MySQL server
    
    Requirements:
    - MySQL server ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏ä‡πà‡∏ô ‡∏ú‡πà‡∏≤‡∏ô XAMPP)
    - ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    - ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ MySQL ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env ‡∏ï‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    """
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ MySQL ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if not settings.database_url.startswith("mysql"):
        print("‚ùå This command is only for MySQL databases")
        print(f"   Current database: {settings.database_url}")
        return
    
    print("üîß Creating MySQL database...")
    try:
        import mysql.connector
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL server ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        print(f"   Connecting to MySQL server at {settings.mysql_host}:{settings.mysql_port}")
        conn = mysql.connector.connect(
            host=settings.mysql_host,
            port=settings.mysql_port,
            user=settings.mysql_user,
            password=settings.mysql_password,
            charset=settings.mysql_charset
        )
        
        cursor = conn.cursor()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ UTF-8 support
        create_db_sql = f"CREATE DATABASE IF NOT EXISTS {settings.mysql_database} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci"
        cursor.execute(create_db_sql)
        print(f"‚úÖ Database '{settings.mysql_database}' created successfully")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
        cursor.execute("SHOW DATABASES")
        databases = [db[0] for db in cursor.fetchall()]
        
        if settings.mysql_database in databases:
            print(f"‚úÖ Database '{settings.mysql_database}' exists and ready to use")
        
        cursor.close()
        conn.close()
        
    except mysql.connector.Error as e:
        print(f"‚ùå MySQL error: {e}")
        print("   Make sure MySQL server is running and credentials are correct")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Failed to create database: {e}")
        sys.exit(1)

def init_db():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    ‡πÉ‡∏ä‡πâ SQLAlchemy models ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    
    Process:
    1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
    2. ‡∏™‡∏£‡πâ‡∏≤‡∏á directories ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≤‡∏Å models.py
    4. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    """
    print("üîß Initializing database...")
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á directories ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (logs, uploads, etc.)
        ensure_directories()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        success = init_database()
        if success:
            print("‚úÖ Database initialized successfully")
            print(f"   Database: {settings.database_url}")
            print("   All tables created successfully")
        else:
            print("‚ùå Database initialization failed")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå Database initialization failed: {e}")
        import traceback
        traceback.print_exc()
        print("\nTroubleshooting:")
        print("1. Check if database server is running")
        print("2. Verify database credentials in .env file")
        print("3. Make sure database exists (use create-mysql-db command)")
        sys.exit(1)

def check_db():
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    """
    print("üîç Checking database connection...")
    if check_db_connection():
        print("‚úÖ Database connection successful")
        print(f"   Database: {settings.database_url}")
        print(f"   Environment: {settings.environment}")
    else:
        print("‚ùå Database connection failed")
        print("\nTroubleshooting:")
        print("1. Check if database server is running")
        print("2. Verify credentials in .env file")
        print("3. Test network connectivity")
        sys.exit(1)

def backup_db():
    """
    ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ SQLite database
    
    ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MySQL ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ mysqldump:
    mysqldump -u root -p rfid_system > backup.sql
    """
    print("üíæ Creating database backup...")
    try:
        if not settings.database_url.startswith("sqlite"):
            print("‚ö†Ô∏è  Backup only supported for SQLite databases")
            print("   For MySQL, use: mysqldump -u root -p rfid_system > backup.sql")
            return
        
        # ‡∏´‡∏≤ path ‡∏Ç‡∏≠‡∏á SQLite database
        db_path = settings.database_url.replace("sqlite:///", "")
        if not os.path.exists(db_path):
            print("‚ùå Database file not found")
            print(f"   Looking for: {db_path}")
            return
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå backup ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
        backup_name = f"{db_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        shutil.copy2(db_path, backup_name)
        print(f"‚úÖ Database backed up to: {backup_name}")
        
    except Exception as e:
        print(f"‚ùå Backup failed: {e}")

def reset_db():
    """
    ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô development environment ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    
    Warning: ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!
    """
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment
    if settings.environment != "development":
        print("‚ùå Database reset only allowed in development environment")
        print(f"   Current environment: {settings.environment}")
        print("   Change ENVIRONMENT=development in .env to use this command")
        sys.exit(1)
    
    # ‡∏Ç‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    print("‚ö†Ô∏è  WARNING: This will delete all data!")
    print("   This action cannot be undone.")
    confirm = input("Are you sure you want to reset the database? (type 'yes' to confirm): ")
    if confirm.lower() != 'yes':
        print("Reset cancelled")
        return
    
    print("üîÑ Resetting database...")
    try:
        # ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô SQLite)
        if settings.database_url.startswith("sqlite"):
            backup_db()
        
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        try:
            from models import Base
        except ImportError:
            print("‚ùå Cannot import models. Make sure models.py exists.")
            sys.exit(1)
            
        # ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        print("   Dropping all tables...")
        Base.metadata.drop_all(bind=engine)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        print("   Creating tables...")
        Base.metadata.create_all(bind=engine)
        
        print("‚úÖ Database reset completed")
        print("   All tables recreated successfully")
        
    except Exception as e:
        print(f"‚ùå Database reset failed: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

# =====================
# Configuration Functions
# =====================

def show_config():
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
    ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
    """
    print("‚öôÔ∏è  Current Configuration:")
    print("=" * 50)
    print(f"   Environment: {settings.environment}")
    print(f"   Debug Mode: {settings.debug}")
    print(f"   Database: {settings.database_url}")
    print(f"   WebSocket: {settings.ws_host}:{settings.ws_port}")
    print(f"   Redis: {settings.redis_url}")
    print(f"   Scanner Port: {settings.scanner_port}")
    print(f"   Log Level: {settings.log_level}")
    print(f"   Log File: {settings.log_file}")
    print(f"   Upload Dir: {settings.upload_dir}")
    print("=" * 50)

def create_env():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env ‡∏à‡∏≤‡∏Å template
    ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
    """
    template_file = Path(".env.template")
    env_file = Path(".env")
    
    if not template_file.exists():
        print("‚ùå .env.template file not found")
        print("   Make sure .env.template exists in the project root")
        sys.exit(1)
    
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists")
        confirm = input("Overwrite existing .env file? (yes/no): ")
        if confirm.lower() != 'yes':
            print("Operation cancelled")
            return
    
    try:
        shutil.copy2(template_file, env_file)
        print("‚úÖ .env file created from template")
        print("   Please edit .env file with your specific configuration:")
        print("   - Database credentials")
        print("   - Scanner settings")
        print("   - Security keys")
    except Exception as e:
        print(f"‚ùå Failed to create .env file: {e}")

# =====================
# Hardware Functions
# =====================

def check_scanner():
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RFID scanner
    ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    """
    print("üì° Checking RFID scanner connection...")
    try:
        from device_scanner_service import DeviceScannerService
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á scanner service ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        scanner_config = {
            'device_id': 1,
            'location_id': 1,
            'connection_type': 'com',
            'connection_info': f'{settings.scanner_port}@{settings.scanner_baudrate}'
        }
        
        scanner = DeviceScannerService(scanner_config)
        if scanner.connect():
            print("‚úÖ RFID scanner connected successfully")
            print(f"   Port: {settings.scanner_port}")
            print(f"   Baud Rate: {settings.scanner_baudrate}")
            scanner.disconnect()
        else:
            print("‚ùå RFID scanner connection failed")
            print(f"   Port: {settings.scanner_port}")
            print("   Troubleshooting:")
            print("   1. Check if scanner is powered on")
            print("   2. Verify COM port in Device Manager")
            print("   3. Check cable connections")
            
    except ImportError:
        print("‚ùå DeviceScannerService not found")
        print("   Check if device_scanner_service.py exists")
    except Exception as e:
        print(f"‚ùå Scanner check failed: {e}")

# =====================
# System Functions
# =====================

def install_deps():
    """
    ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Python dependencies ‡∏à‡∏≤‡∏Å requirements.txt
    ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï dependencies
    """
    print("üì¶ Installing dependencies...")
    try:
        import subprocess
        
        # ‡∏£‡∏±‡∏ô pip install
        result = subprocess.run(
            [sys.executable, "-m", "pip", "install", "-r", "requirements.txt"], 
            check=True, 
            capture_output=True, 
            text=True
        )
        
        print("‚úÖ Dependencies installed successfully")
        if result.stdout:
            print("Installation output:")
            print(result.stdout)
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to install dependencies: {e}")
        if e.stdout:
            print("STDOUT:", e.stdout)
        if e.stderr:
            print("STDERR:", e.stderr)
        print("\nTry running manually: pip install -r requirements.txt")
    except FileNotFoundError:
        print("‚ùå requirements.txt not found")
        print("   Make sure requirements.txt exists in the project root")

def show_structure():
    """
    ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
    ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    """
    print("üìÅ Current Project Structure:")
    print("=" * 50)
    
    def print_tree(directory, prefix="", max_depth=3, current_depth=0):
        """
        ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö tree
        
        Args:
            directory: ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
            prefix: prefix ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            max_depth: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            current_depth: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        """
        if current_depth >= max_depth:
            return
            
        try:
            items = sorted(Path(directory).iterdir())
            for i, item in enumerate(items):
                # ‡∏Ç‡πâ‡∏≤‡∏° hidden files ‡πÅ‡∏•‡∏∞ cache
                if item.name.startswith('.') or item.name == '__pycache__':
                    continue
                    
                is_last = i == len(items) - 1
                current_prefix = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
                print(f"{prefix}{current_prefix}{item.name}")
                
                # ‡πÅ‡∏™‡∏î‡∏á subdirectories
                if item.is_dir() and current_depth < max_depth - 1:
                    extension = "    " if is_last else "‚îÇ   "
                    print_tree(item, prefix + extension, max_depth, current_depth + 1)
                    
        except PermissionError:
            print(f"{prefix}    [Permission Denied]")
    
    print_tree(".", max_depth=3)
    print("=" * 50)

# =====================
# Main Function
# =====================

def main():
    """
    Main function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CLI
    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ command line arguments ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    """
    parser = argparse.ArgumentParser(
        description='RFID System Management CLI',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  python manage.py config           # Show current configuration
  python manage.py init-db          # Initialize database
  python manage.py check-db         # Check database connection
  python manage.py create-mysql-db  # Create MySQL database
        """
    )
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° command choices
    parser.add_argument('command', choices=[
        'init-db', 'check-db', 'backup-db', 'reset-db', 'create-mysql-db',
        'config', 'create-env', 'check-scanner', 'install-deps', 'structure'
    ], help='Command to run')
    
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ arguments ‡πÅ‡∏™‡∏î‡∏á help
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)
    
    args = parser.parse_args()
    
    # ‡πÅ‡∏™‡∏î‡∏á header
    print(f"üöÄ RFID System Manager - {args.command}")
    print("=" * 50)
    
    try:
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏≤‡∏° command
        if args.command == 'create-mysql-db':
            create_mysql_database()
        elif args.command == 'init-db':
            init_db()
        elif args.command == 'check-db':
            check_db()
        elif args.command == 'backup-db':
            backup_db()
        elif args.command == 'reset-db':
            reset_db()
        elif args.command == 'config':
            show_config()
        elif args.command == 'create-env':
            create_env()
        elif args.command == 'check-scanner':
            check_scanner()
        elif args.command == 'install-deps':
            install_deps()
        elif args.command == 'structure':
            show_structure()
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Operation cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == '__main__':
    main()